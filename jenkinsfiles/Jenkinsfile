#!/usr/bin/env groovy
@Library('evenOdd') _
import Properties
import DB


def ORACLE_TNS
def msteamsMessage=[ ]


node('CI') {

    def jobUserId, jobUserName

    wrap([$class: 'BuildUser']) {
        jobUserId = "${BUILD_USER_ID}"
        jobUserName = "${BUILD_USER}"
    }

    println("Started By: ${jobUserName}")
    currentBuild.description = "Started By: ${jobUserName}.${ENVIRONMENT}"

    properties([
            [$class: 'BuildDiscarderProperty', strategy: [$class: 'LogRotator', artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '20']],
            disableConcurrentBuilds(),
            parameters([
                    gitParameter(
                            branch: 'master',
                            branchFilter: '.*',
                            defaultValue: '',
                            description: 'Test branches',
                            name: 'API_GIT_BRANCH',
                            quickFilterEnabled: false,
                            selectedValue: 'NONE',
                            sortMode: 'DESCENDING',
                            tagFilter: '*',
                            type: 'PT_BRANCH',
                            useRepository: Properties.Git.API_URL,
                            listSize: '15'
                    ),
                    choice(
                            name: 'ENVIRONMENT',
                            choices: DB.envList(),
                            description: DB.envDescription()
                    )

            ])
    ])

     try {
         // Git checkout
         stage('checkout') {
             echo 'Git checkout...'
           gitCheckout(API_GIT_BRANCH, Properties.Git.API_CRED_ID, Properties.Git.API_URL)
             echo 'Git checkout!'
         }
         // Getting environment variables
         stage('get env vars') {
             echo 'Getting environment variables...'
             (ORACLE_TNS) = DB.envList(ENVIRONMENT)
             echo 'Got environment variables!'
         }
         // On this stage, script difference_db.cmd compare database difference and generate a report in the text file.
         stage('Compare Database Difference') {
             echo 'Comparing Database Difference...'
             withCredentials([
                     string(credentialsId: 'CI_DB_PMC_SYSTEM_PASSW', variable: 'CI_DB_PMC_SYSTEM_PASSW')
             ])
                     {
                         dbUtils.createReport(ORACLE_TNS, CI_DB_PMC_SYSTEM_PASSW)
                                              }
             echo 'Compared Database Difference!'
         }
         // On this stage, mvn wagon:upload-single plugin upload report to Nexus.
         stage('Upload Report to Nexus') {
             echo 'Uploading Report to Nexus...'
             msteamsMessage += promoteRawJob(Properties.RawArtifact.DIFFERENCE_DB, Properties.RawArtifact.DIFFERENCE_DB.code)
             echo 'Uploaded Report to Nexus!'
         }
         currentBuild.result = 'SUCCESS'
     } catch (Exception err) {
         println "Error: ${err}"
         currentBuild.result = 'FAILURE'
     } finally {
         // Send Email && MSTeams notification.
         switch (currentBuild.result) {
             case 'SUCCESS':
                 mailNotify(
                 )
                 msteamsNotify.success("Build success")
                 break
             case 'FAILURE':
                 msteamsNotify.fail("Build failed")
                 break
             default:
                 break
         }
     }

}
